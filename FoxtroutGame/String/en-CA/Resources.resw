<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="aboutApp.Header" xml:space="preserve">
    <value>About</value>
    <comment>about top tab</comment>
  </data>
  <data name="averageGameTimeLabel.Text" xml:space="preserve">
    <value>Average Time</value>
  </data>
  <data name="creditsLabel.Text" xml:space="preserve">
    <value>Credits</value>
  </data>
  <data name="difficulty0.Content" xml:space="preserve">
    <value>Simplistic</value>
  </data>
  <data name="difficulty1.Content" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="difficulty2.Content" xml:space="preserve">
    <value>Difficult</value>
  </data>
  <data name="difficulty3.Content" xml:space="preserve">
    <value>Doctorate</value>
  </data>
  <data name="difficulty4.Content" xml:space="preserve">
    <value>Saturation</value>
  </data>
  <data name="difficultySettingLabel.Text" xml:space="preserve">
    <value>Difficulty</value>
    <comment>flyout difficulty label</comment>
  </data>
  <data name="explosionNoiseCredit3.Text" xml:space="preserve">
    <value>Deganoth</value>
  </data>
  <data name="explosionNoiseCredit1.Text" xml:space="preserve">
    <value>Explosion noise by</value>
    <comment>no space on end</comment>
  </data>
  <data name="fontsCredit1.Text" xml:space="preserve">
    <value>Fonts from </value>
  </data>
  <data name="fontsCredit3.Text" xml:space="preserve">
    <value>by myname5749</value>
    <comment>no punctuation</comment>
  </data>
  <data name="fromTheProgrammerLabel.Text" xml:space="preserve">
    <value>From the Programmer</value>
  </data>
  <data name="gameDisplayName.Text" xml:space="preserve">
    <value>Minesweeper</value>
    <comment>used for display in-game, not same as game title</comment>
  </data>
  <data name="gameGoalLabel.Text" xml:space="preserve">
    <value>Goal of the Game</value>
  </data>
  <data name="gameGoalParagraph.Text" xml:space="preserve">
    <value>Reveal all the empty tiles without hitting any mine.</value>
  </data>
  <data name="gameSizeSettingLabel.Text" xml:space="preserve">
    <value>Game Size</value>
  </data>
  <data name="gamesLostLabel.Text" xml:space="preserve">
    <value>Games Lost</value>
  </data>
  <data name="gamesPlayedLabel.Text" xml:space="preserve">
    <value>Games Played</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>Minesweeper Basic</value>
    <comment>official app name</comment>
  </data>
  <data name="gamesWonLabel.Text" xml:space="preserve">
    <value>Games Won</value>
  </data>
  <data name="gameTab.Header" xml:space="preserve">
    <value>Game</value>
    <comment>top tab</comment>
  </data>
  <data name="historyLabel.Text" xml:space="preserve">
    <value>Minesweeper History</value>
  </data>
  <data name="historyParagraph1.Text" xml:space="preserve">
    <value>Curt Johnson, a programmer hired by Microsoft, wrote a game whose objective was to get through a minefield from one corner to the other, in 1998. Robert Donner, a work colleague, used this code to make his own weekend version of the game, dubbed “Mine.” This game was gradually tweaked and passed along among work colleagues.</value>
  </data>
  <data name="historyParagraph2.Text" xml:space="preserve">
    <value>In 1990, Microsoft programmers were invited to submit games for Windows 3.0, and “Mine,” now also known as “Winmine,” was accepted. With retouched graphics and a new name, Minesweeper would become famous in 1992, when it was included in Windows 3.2 along with Solitaire. It would then become part of Windows 95, Windows 98, Windows 2000, Windows XP, Windows Vista, and Windows 7.</value>
  </data>
  <data name="numberOfMines.ToolTipService.ToolTip" xml:space="preserve">
    <value>Number of mines</value>
  </data>
  <data name="programmerParagraph1.Text" xml:space="preserve">
    <value>Hi! I’m</value>
  </data>
  <data name="programmerParagraph2.Text" xml:space="preserve">
    <value>a Canadian student in Computer Information Systems and Graphic Design at</value>
  </data>
  <data name="programmerParagraph3.Text" xml:space="preserve">
    <value>This course of study led me to recreate Minesweeper as a final project in C# programming using the .NET framework.</value>
  </data>
  <data name="programmerParagraph4.Text" xml:space="preserve">
    <value>Making a functional draft of the game took me a day. However, getting the win situation to register correctly took further work. The most difficult part of programming this game was creating the method to reveal connected blank tiles. I had to rewrite it on a fresh mind, and this took three and a half hours while working based on previous knowledge.</value>
  </data>
  <data name="restartGameLabel.Text" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="rulesLabel.Text" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="rulesParagraph.Text" xml:space="preserve">
    <value>The first click is always safe; a number of mines per number of tiles is then randomly distributed based on the difficulty setting. Numbered tiles show how many mines touch them at the edges or corners. Clicking a blank tile reveals all connected blank tiles at once. Hitting a mine is an immediate loss, but revealing all tiles that are not mines is a win.</value>
  </data>
  <data name="sessionStatistics.Header" xml:space="preserve">
    <value>Results</value>
    <comment>top tab</comment>
  </data>
  <data name="tilesRevealed.ToolTipService.ToolTip" xml:space="preserve">
    <value>Tiles revealed</value>
  </data>
  <data name="timeIndicator.ToolTipService.ToolTip" xml:space="preserve">
    <value>Time since game start</value>
  </data>
  <data name="winNoiseCredit1.Text" xml:space="preserve">
    <value>Jingle Win sound by</value>
  </data>
  <data name="underCC.Text" xml:space="preserve">
    <value>under Creative Commons Attribution</value>
  </data>
  <data name="restartButton.Content" xml:space="preserve">
    <value>Restart</value>
  </data>
  <data name="startButton.Content" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="newBadgeEarned.Text" xml:space="preserve">
    <value>New badge earned!</value>
  </data>
  <data name="objectiveBadgesTitle.Text" xml:space="preserve">
    <value>Objective Badges</value>
  </data>
  <data name="reveal10000ObjectiveDescription" xml:space="preserve">
    <value>Reveal 10 000 tiles in games you win.</value>
  </data>
  <data name="reveal10000ObjectiveTitle" xml:space="preserve">
    <value>Blessed</value>
  </data>
  <data name="reveal1000ObjectiveDescription" xml:space="preserve">
    <value>Reveal 1 000 tiles in games you win.</value>
  </data>
  <data name="reveal1000ObjectiveTitle" xml:space="preserve">
    <value>Chicklet</value>
  </data>
  <data name="reveal100ObjectiveDescription" xml:space="preserve">
    <value>Reveal 100 tiles in games you win.</value>
  </data>
  <data name="reveal100ObjectiveTitle" xml:space="preserve">
    <value>Bud</value>
  </data>
  <data name="winDifficultObjectiveDescription" xml:space="preserve">
    <value>Win a game in the ‘Difficult’ setting. The game must be a minimum size of 10.</value>
  </data>
  <data name="winDifficultObjectiveTitle" xml:space="preserve">
    <value>Professional</value>
  </data>
  <data name="winDoctorateObjectiveDescription" xml:space="preserve">
    <value>Win a game in the ‘Doctorate’ setting. The game must be a minimum size of 10.</value>
  </data>
  <data name="winDoctorateObjectiveTitle" xml:space="preserve">
    <value>Scholar</value>
  </data>
  <data name="winSaturationObjectiveDescription" xml:space="preserve">
    <value>Win a game in the ‘Saturation’ setting. The game must be a minimum size of 10.</value>
  </data>
  <data name="winSaturationObjectiveTitle" xml:space="preserve">
    <value>Saturation</value>
  </data>
  <data name="winSingleClickObjectiveDescription" xml:space="preserve">
    <value>Win any game in just one click.</value>
  </data>
  <data name="winSingleClickObjectiveTitle" xml:space="preserve">
    <value>Pure Luck</value>
  </data>
</root>